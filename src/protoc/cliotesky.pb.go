// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cliotesky.proto

/*
Package cliotesky is a generated protocol buffer package.

It is generated from these files:
	cliotesky.proto

It has these top-level messages:
	Empty
	Token
	ClioteMessage
	ClioteSend
	AuthRequest
*/
package cliotesky

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ClioteMessage struct {
	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	Sender     string `protobuf:"bytes,3,opt,name=sender" json:"sender,omitempty"`
}

func (m *ClioteMessage) Reset()                    { *m = ClioteMessage{} }
func (m *ClioteMessage) String() string            { return proto.CompactTextString(m) }
func (*ClioteMessage) ProtoMessage()               {}
func (*ClioteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClioteMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ClioteMessage) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ClioteMessage) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type ClioteSend struct {
	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	Recipient  string `protobuf:"bytes,4,opt,name=recipient" json:"recipient,omitempty"`
}

func (m *ClioteSend) Reset()                    { *m = ClioteSend{} }
func (m *ClioteSend) String() string            { return proto.CompactTextString(m) }
func (*ClioteSend) ProtoMessage()               {}
func (*ClioteSend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ClioteSend) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ClioteSend) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ClioteSend) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ClioteSend) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

type AuthRequest struct {
	User     string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AuthRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Token)(nil), "Token")
	proto.RegisterType((*ClioteMessage)(nil), "ClioteMessage")
	proto.RegisterType((*ClioteSend)(nil), "ClioteSend")
	proto.RegisterType((*AuthRequest)(nil), "AuthRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClioteSkyService service

type ClioteSkyServiceClient interface {
	Request(ctx context.Context, in *Token, opts ...grpc.CallOption) (ClioteSkyService_RequestClient, error)
	Send(ctx context.Context, in *ClioteSend, opts ...grpc.CallOption) (*Empty, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Token, error)
}

type clioteSkyServiceClient struct {
	cc *grpc.ClientConn
}

func NewClioteSkyServiceClient(cc *grpc.ClientConn) ClioteSkyServiceClient {
	return &clioteSkyServiceClient{cc}
}

func (c *clioteSkyServiceClient) Request(ctx context.Context, in *Token, opts ...grpc.CallOption) (ClioteSkyService_RequestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClioteSkyService_serviceDesc.Streams[0], c.cc, "/ClioteSkyService/Request", opts...)
	if err != nil {
		return nil, err
	}
	x := &clioteSkyServiceRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClioteSkyService_RequestClient interface {
	Recv() (*ClioteMessage, error)
	grpc.ClientStream
}

type clioteSkyServiceRequestClient struct {
	grpc.ClientStream
}

func (x *clioteSkyServiceRequestClient) Recv() (*ClioteMessage, error) {
	m := new(ClioteMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clioteSkyServiceClient) Send(ctx context.Context, in *ClioteSend, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ClioteSkyService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clioteSkyServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/ClioteSkyService/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClioteSkyService service

type ClioteSkyServiceServer interface {
	Request(*Token, ClioteSkyService_RequestServer) error
	Send(context.Context, *ClioteSend) (*Empty, error)
	Auth(context.Context, *AuthRequest) (*Token, error)
}

func RegisterClioteSkyServiceServer(s *grpc.Server, srv ClioteSkyServiceServer) {
	s.RegisterService(&_ClioteSkyService_serviceDesc, srv)
}

func _ClioteSkyService_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Token)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClioteSkyServiceServer).Request(m, &clioteSkyServiceRequestServer{stream})
}

type ClioteSkyService_RequestServer interface {
	Send(*ClioteMessage) error
	grpc.ServerStream
}

type clioteSkyServiceRequestServer struct {
	grpc.ServerStream
}

func (x *clioteSkyServiceRequestServer) Send(m *ClioteMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ClioteSkyService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClioteSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClioteSkyServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClioteSkyService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClioteSkyServiceServer).Send(ctx, req.(*ClioteSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClioteSkyService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClioteSkyServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClioteSkyService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClioteSkyServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClioteSkyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ClioteSkyService",
	HandlerType: (*ClioteSkyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ClioteSkyService_Send_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _ClioteSkyService_Auth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Request",
			Handler:       _ClioteSkyService_Request_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cliotesky.proto",
}

func init() { proto.RegisterFile("cliotesky.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4b, 0x4f, 0x83, 0x40,
	0x10, 0x0e, 0x2d, 0x50, 0x3b, 0xad, 0x8f, 0x4c, 0x8c, 0x21, 0x58, 0x8d, 0xc1, 0x8b, 0xa7, 0x8d,
	0xd1, 0xb3, 0x07, 0x63, 0x3c, 0x7a, 0xa1, 0xde, 0x3c, 0x21, 0x8c, 0xba, 0x41, 0x01, 0x77, 0x07,
	0x0d, 0xff, 0xde, 0x30, 0x5d, 0x5b, 0x7c, 0xdc, 0xe6, 0xdb, 0xd9, 0xf9, 0x1e, 0x33, 0xb0, 0x9b,
	0xbf, 0xea, 0x9a, 0xc9, 0x96, 0x9d, 0x6a, 0x4c, 0xcd, 0x75, 0x32, 0x81, 0xe0, 0xf6, 0xad, 0xe1,
	0x2e, 0x39, 0x82, 0xe0, 0xbe, 0x2e, 0xa9, 0xc2, 0x7d, 0x08, 0xb8, 0x2f, 0x22, 0xef, 0xc4, 0x3b,
	0x9b, 0xa6, 0x2b, 0x90, 0x3c, 0xc0, 0xf6, 0x8d, 0x8c, 0xde, 0x91, 0xb5, 0xd9, 0x33, 0x21, 0x82,
	0x5f, 0x64, 0x9c, 0xc9, 0xaf, 0x79, 0x2a, 0x35, 0x1e, 0x03, 0xe8, 0x82, 0x2a, 0xd6, 0x4f, 0x9a,
	0x4c, 0x34, 0x92, 0xf9, 0xc1, 0x0b, 0x1e, 0x40, 0x68, 0xa9, 0x2a, 0xc8, 0x44, 0x63, 0xe9, 0x39,
	0x94, 0x30, 0xc0, 0x8a, 0x7c, 0x49, 0x55, 0xf1, 0x2f, 0xf3, 0xda, 0xd4, 0x68, 0x60, 0xea, 0x97,
	0xde, 0xf8, 0x8f, 0xde, 0x02, 0xa6, 0x86, 0x72, 0xdd, 0x68, 0xaa, 0x38, 0xf2, 0xa5, 0xbd, 0x79,
	0x48, 0xae, 0x60, 0x76, 0xdd, 0xf2, 0x4b, 0x4a, 0xef, 0x2d, 0x59, 0xee, 0x65, 0x5b, 0x4b, 0xc6,
	0xc5, 0x96, 0x1a, 0x63, 0xd8, 0x6a, 0x32, 0x6b, 0x3f, 0x6b, 0x53, 0x38, 0xe5, 0x35, 0xbe, 0x30,
	0xb0, 0xe7, 0x4c, 0x97, 0xdd, 0x92, 0xcc, 0x87, 0xce, 0x09, 0x4f, 0x61, 0xf2, 0x4d, 0x17, 0x2a,
	0x59, 0x67, 0xbc, 0xa3, 0x7e, 0xec, 0xed, 0xdc, 0xc3, 0x43, 0xf0, 0x25, 0xe7, 0x4c, 0x6d, 0x42,
	0xc7, 0xa1, 0x92, 0x33, 0xe0, 0x02, 0xfc, 0xde, 0x14, 0xce, 0xd5, 0xc0, 0x5b, 0xec, 0xc8, 0x1e,
	0x43, 0x39, 0xda, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x1f, 0x77, 0x32, 0xc7, 0x01,
	0x00, 0x00,
}
